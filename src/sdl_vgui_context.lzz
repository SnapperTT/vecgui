#ifdef STTR_ENABLED
	#insert "sttr_compat_macros.hpp"
#endif

struct SDL_Vgui_PrerenderedText : public Vgui_PrerenderedTextI {
	sdl_stb_prerendered_text prt;
	
	SDL_Vgui_PrerenderedText():Vgui_PrerenderedTextI(){
		prt.mRenderer = ((SDL_Vgui_Context *)Vgui_ContextI::aContext)->mRenderer;
		}
	virtual ~SDL_Vgui_PrerenderedText() { prt.freeTexture(); }
		
	void draw(const VGUI_COORD x, const VGUI_COORD y) {
		prt.draw(x, y);
		}
	void drawWithColorMod(const VGUI_COORD x, const VGUI_COORD y, const VGUI_COLOR r, const VGUI_COLOR g, const VGUI_COLOR b, const VGUI_COLOR a = VGUI_COLOR_MAX) {
		prt.drawWithColorMod(x, y, r, g, b, a);
		}
		
	VGUI_COORD getWidth() const { return prt.width; }
	VGUI_COORD getHeight() const { return prt.height; }
	};


class SDL_Vgui_Context : public Vgui_ContextI {
public:
	SDL_Renderer * mRenderer; // SDL_Renderer. You'll have to create/destroy this
	//TTF_Font * gFont; // SDL_TTF font renderer. You'll have to create/destory this
	sdl_stb_font_cache * gFont; // SDL_FontCache font. SDL_FontCache caches SDL_ttf fonts to improve resource usage and perf.
	uint8_t dr,dg,db,da;	// draw colour
	
	struct SDL_Vgui_Gradiant {
		VGUI_COORD x1, y1, x2, y2;
		uint8_t r1,g1,b1,a1;
		uint8_t r2,g2,b2,a2;
		float lx, ly, mx, my, sf;
		bool isActive;
		
		void computeLineEqn() {
			VGUI_COORD abx = x2-x1;
			VGUI_COORD aby = y2-y1;
			// cross z^ to get perp. vector
			lx = aby;
			ly = -abx;
			// normalise lx,ly
			double len = sqrt(lx*lx + ly*ly);
			sf = 1.0;
			if (len > 0.0000001) {
				lx/=len;
				ly/=len;
				sf = 1.0/len;
				}

			mx = (x1+x2)/2.0;
			my = (y1+y2)/2.0;
			}
			
		void getColourAt (VGUI_COORD xp, VGUI_COORD yp, uint8_t & rOut, uint8_t & gOut, uint8_t & bOut, uint8_t & aOut) {
			//distance to point
			float d = // |(x1-mx,y1-my,0) x (lx, ly, 0)|
					  ly*(xp-mx) - lx*(yp-my);
			d=VGUI_CLAMP(d*sf+0.5, 0.f, 1.f);
			
			rOut = r1*d + r2*(1-d);
			gOut = g1*d + g2*(1-d);
			bOut = b1*d + b2*(1-d);
			aOut = a1*d + a2*(1-d);			
			//std::cout << "(x,y) " << xp << " " << yp << ", d: " << d << " rgba " << double(rOut) << " " << double(gOut) << " " << double(bOut) << " " << double(aOut) << std::endl;
			}
		};
	
	SDL_Vgui_Gradiant activeGradiant;
	
	SDL_Vgui_Context() : Vgui_ContextI() {
		activeGradiant = {0};
		activeGradiant.isActive = false;
		dr = 0;
		dg = 0;
		db = 0;
		da = 0;
		}
		
	#ifdef STTR_ENABLED
	static void sttr_register() {
		sttr::RegNamespace & R = *sttr::getGlobalNamespace();
		R.deriveClass<Vgui_ContextI, SDL_Vgui_Context>("SDL_Vgui_Context")
		.endClass();
		}
	STTR_CLASS_SIG(SDL_Vgui_Context)
	#endif
	
	virtual Vgui_PrerenderedTextI * genPrerenderedText (const sttfont_formatted_text & str) const {
		if (!gFont) return NULL;
		SDL_Vgui_PrerenderedText * r = VGUI_NEW(SDL_Vgui_PrerenderedText);
		gFont->renderTextToObject(&(r->prt), str);
		
		//std::cout << "Prerendered: " << str << " " << r->prt.width << " " << r->prt.height << std::endl;
		
		
		return r;
		}
		
	// Rasterises a triangle in software (!!)
	inline static int renderTriangle_edgeTest(int x1, int y1, int x2, int y2, int x3, int y3) {
		return (y3-y1)*(x2-x1) - (x3-x1)*(y2-y1);
		}
		
	void setGradient(const VGUI_COORD x1, const VGUI_COORD y1, const VGUI_COORD x2, const VGUI_COORD y2, const uint8_t r1, const uint8_t g1, const uint8_t b1, const uint8_t a1, const uint8_t r2, const uint8_t g2, const uint8_t b2, const uint8_t a2) {
		activeGradiant.x1 = x1;
		activeGradiant.x2 = x2;
		activeGradiant.y1 = y1;
		activeGradiant.y2 = y2;
		activeGradiant.r1 = r1;
		activeGradiant.g1 = g1;
		activeGradiant.b1 = b1;
		activeGradiant.a1 = a1;
		activeGradiant.r2 = r2;
		activeGradiant.g2 = g2;
		activeGradiant.b2 = b2;
		activeGradiant.a2 = a2;
		activeGradiant.isActive = true;
		activeGradiant.computeLineEqn();
		}
		
	void clearGradient() {
		activeGradiant.isActive = false;
		SDL_SetRenderDrawColor(mRenderer, dr,dg,db,da);
		}
	
	
	void renderTriangle (const VGUI_COORD x1, const VGUI_COORD y1, const VGUI_COORD x2, const VGUI_COORD y2, const VGUI_COORD x3, const VGUI_COORD y3) {
		VGUI_COORD x1a = scalef * x1;
		VGUI_COORD y1a = scalef * y1;
		VGUI_COORD x2a = scalef * x2;
		VGUI_COORD y2a = scalef * y2;
		VGUI_COORD x3a = scalef * x3;
		VGUI_COORD y3a = scalef * y3;

		// Get axis aligned bounding box
		int xMin = VGUI_MIN(VGUI_MIN(x1a, x2a), x3a);
		int xMax = VGUI_MAX(VGUI_MAX(x1a, x2a), x3a);
		int yMin = 1.0 + VGUI_MIN(VGUI_MIN(y1a, y2a), y3a);
		int yMax = 1.0 + VGUI_MAX(VGUI_MAX(y1a, y2a), y3a);

		// Sainity check: Is this scissor culled(?)
		const bool scissorTest = !activeScissor.isNull();
		if (scissorTest) {
			if (xMin > activeScissor.x + activeScissor.w || xMax < activeScissor.x
			|| yMin > activeScissor.y + activeScissor.h || yMax < activeScissor.y) {
				return;
				}
			}
		
		// Itterate over pixels
		int ix1 = x1a;
		int iy1 = y1a;
		int ix2 = x2a;
		int iy2 = y2a;
		int ix3 = x3a;
		int iy3 = y3a;
		
		// winding order test
		int ax = x2 - x1;
		int ay = y2 - y1;
		int bx = x3 - x1;
		int by = y3 - y1;
		const bool reverseWindingOrder = (ax*by - ay*bx) < 0;
		
		if (reverseWindingOrder) {
			int swapx = ix3;
			int swapy = iy3;
			ix3 = ix2;
			iy3 = iy2;
			ix2 = swapx;
			iy2 = swapy;
			}
			

		for (int i = xMin; i <= xMax; ++i) {
			if (scissorTest) {
				if (i > activeScissor.x + activeScissor.w || i < activeScissor.x)
					continue;
				}
			int jIn = yMax+1;
			int jOut = yMax;
			bool intersectsTri = false;
			for (int j = yMin; j <= yMax; ++j) {
				int t1 = renderTriangle_edgeTest(ix1, iy1, ix2, iy2, i, j);
				int t2 = renderTriangle_edgeTest(ix2, iy2, ix3, iy3, i, j);
				int t3 = renderTriangle_edgeTest(ix3, iy3, ix1, iy1, i, j);
				
				if (t1 >= 0 && t2 >= 0 && t3 >= 0) {
					// inside
					if (!intersectsTri) {
						intersectsTri = true;
						jIn = j;
						}
					}
				else {
					// outside
					if (intersectsTri) {
						intersectsTri = false;
						jOut = j;
						break;
						}
					}

				}
				
			if (jOut >= jIn) {
				// scissor test row
				if (scissorTest) {
					if (jIn > activeScissor.y + activeScissor.h || jOut < activeScissor.y)
						continue;
					}
				bool gradTest = activeGradiant.isActive;
				if (gradTest) {
					// test color at top and bottom of tri
					uint8_t r1,g1,b1,a1, r2,g2,b2,a2;
					activeGradiant.getColourAt(i,jIn, r1,g1,b1,a1);
					activeGradiant.getColourAt(i,jOut, r2,g2,b2,a2);
					gradTest = (r1 - r2) | (g1 - g2) | (b1 - b2) | (a1 - a2); //non-zero = difference in gradient 
					if (!gradTest)
						SDL_SetRenderDrawColor(mRenderer, r1,g1,b1,a1); // render the whole rect in a gradiant
					}
				if (!gradTest) {
					SDL_Rect r;
					r.x = i;
					r.y = jIn;
					r.w = 1;
					r.h = jOut - jIn+1;
					SDL_RenderDrawRect(mRenderer, &r);
					}
				else {
					// very slow! draw pixel by pixel
					// tbd - try blitting a surface
					for (int j = jIn; j <= jOut; ++j) {
						uint8_t r1,g1,b1,a1;
						activeGradiant.getColourAt(i,j, r1,g1,b1,a1);
						SDL_SetRenderDrawColor(mRenderer, r1,g1,b1,a1);
						SDL_RenderDrawPoint(mRenderer, i, j);
						}
					}
				}
			}
		}

	void ctx_setScissor() {
		if (activeScissor.isNull()) {
			SDL_RenderSetClipRect(mRenderer, NULL);
			return;
			}
		SDL_Rect r;
		r.x = activeScissor.x;
		r.y = activeScissor.y;
		r.w = activeScissor.w;
		r.h = activeScissor.h;
		SDL_RenderSetClipRect(mRenderer, &r);
		}

	void setColor (const VGUI_COLOR r, const VGUI_COLOR g, const VGUI_COLOR b, const VGUI_COLOR a) {
		dr = r; dg = g; db = b; da = a;
		SDL_SetRenderDrawColor(mRenderer, dr,dg,db,da);
		}
		
	void setColorF (const float r, const float g, const float b, const float a) {
		dr = VGUI_COLOR_MAX*r; dg = VGUI_COLOR_MAX*g; db = VGUI_COLOR_MAX*b; da = VGUI_COLOR_MAX*a;
		SDL_SetRenderDrawColor(mRenderer, dr,dg,db,da);
		}

	void clear () {
		//SDL_RenderSetClipRect(mRenderer, NULL);
		setColor(VGUI_COLOR_MAX,VGUI_COLOR_MAX,VGUI_COLOR_MAX,VGUI_COLOR_MAX);
		SDL_RenderClear(mRenderer);
		}
	void renderQuad (const VGUI_COORD x1, const VGUI_COORD y1, const VGUI_COORD x2, const VGUI_COORD y2) {
		VGUI_COORD px1 = VGUI_MIN(x1, x2);
		VGUI_COORD px2 = VGUI_MAX(x1, x2);
		VGUI_COORD py1 = VGUI_MIN(y1, y2);
		VGUI_COORD py2 = VGUI_MAX(y1, y2);
		renderQuadWH(px1, py1, px2 - px1, py2 - py1);
		}
	void renderQuadWH (const VGUI_COORD x1, const VGUI_COORD y1, const VGUI_COORD width, const VGUI_COORD height) {
		int px1 = scalef * x1;
		int py1 = scalef * y1;
		int w = scalef * width;
		int h = scalef * height;
		SDL_Rect r;
		r.x = px1, r.y = py1, r.w = w, r.h = h;
		
		if (activeGradiant.isActive) {
			const bool scissorTest = !activeScissor.isNull();
			for (int i = r.x; i < r.x+r.w; ++i) {
				// scissor test row
				int jIn = r.y;
				int jOut = r.y+r.h;
				if (scissorTest) {
					if (i > activeScissor.x + activeScissor.w || i < activeScissor.x ||
						jIn > activeScissor.y + activeScissor.h || jOut < activeScissor.y)
						continue;
					}
				uint8_t r1,g1,b1,a1, r2,g2,b2,a2;
				activeGradiant.getColourAt(i,jIn, r1,g1,b1,a1);
				activeGradiant.getColourAt(i,jOut, r2,g2,b2,a2);
				bool gradTest = (r1 - r2) | (g1 - g2) | (b1 - b2) | (a1 - a2); //non-zero = difference in gradient 
				if (!gradTest) {
					SDL_SetRenderDrawColor(mRenderer, r1,g1,b1,a1); // render the whole rect in a gradiant
					SDL_Rect r2;
					r2.x = i;
					r2.y = jIn;
					r2.w = 1;
					r2.h = jOut - jIn;
					SDL_RenderDrawRect(mRenderer, &r2);
					}
				else {
					for (int j = jIn; j <= jOut; ++j) {
						uint8_t r1,g1,b1,a1;
						activeGradiant.getColourAt(i,j, r1,g1,b1,a1);
						SDL_SetRenderDrawColor(mRenderer, r1,g1,b1,a1);
						SDL_RenderDrawPoint(mRenderer, i, j);
						}
					}
				}
			return;
			}
		
		SDL_RenderFillRect (mRenderer, &r);
		}
	
	
	const static uint64_t cZero = SDL_GetPerformanceCounter();
	const static double pefFq = SDL_GetPerformanceFrequency();
	double getTime() const {
		return (SDL_GetPerformanceCounter() - cZero)/pefFq;
		}
	
	// Text functions
	virtual void renderText (const sttfont_formatted_text & text, const VGUI_COORD x1, const VGUI_COORD y1) {
		if (!gFont) return;
		gFont->drawText(scalef*x1, scalef*y1, text);
		}
	virtual void getTextSize (const sttfont_formatted_text & text, VGUI_COORD & widthOut, VGUI_COORD & heightOut, sttfont_lookupHint * mHint = NULL, const VGUI_COORD * const maxWidth = NULL) const {
		if (!gFont) return;
		int w, h;
		int maxWidthi = maxWidth ? *maxWidth : 0;
		gFont->getTextSize(w, h, text, mHint, maxWidthi ? &maxWidthi : NULL);
		widthOut = w/scalef;
		heightOut = h/scalef;
		}
	virtual VGUI_COORD getTextWidth (const sttfont_formatted_text & text, sttfont_lookupHint * mHint = NULL, const VGUI_COORD * const maxWidth = NULL) const {
		if (!gFont) return 0;		
		int widthOut, heightOut;
		int maxWidthi = maxWidth ? *maxWidth : 0;
		gFont->getTextSize(widthOut, heightOut, text, mHint, maxWidthi ? &maxWidthi : NULL);
		return widthOut / scalef;
		}
	virtual VGUI_COORD getTextHeight (const sttfont_formatted_text & text, sttfont_lookupHint * mHint = NULL) const {
		if (!gFont) return 0;
		return gFont->getTextHeight(text) / scalef;
		}
	virtual VGUI_COORD getTextLineHeight() const {
		if (!gFont) return Vgui_ContextI::getTextLineHeight();
		return gFont->getScaledRowSize() / scalef;
		}
		
	virtual int getTextCaretPos (const sttfont_formatted_text & text, const VGUI_COORD & relativeX, const VGUI_COORD & relativeY, sttfont_lookupHint * mHint = NULL) {
		if (!gFont) return -1;
		return gFont->getCaretPos(text, relativeX * scalef, relativeY * scalef, mHint);
		}
		
	void breakString (const sttfont_formatted_text & stringIn, VGUI_VECTOR<sttfont_formatted_text> & arrOut, const VGUI_COORD xs,
		const bool tokeniseNewLines = true, VGUI_VECTOR<vecgui::uintQuad> * breakPoints = NULL) {
		vecgui::breakString_worker(gFont, stringIn, arrOut, xs, tokeniseNewLines, breakPoints);	
		}
	
	}
