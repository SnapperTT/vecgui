// This file is autogenerated. See look at the .lzz files in the src/ directory for a more human-friendly version
// sdl_vgui_context.hh
//

#ifndef LZZ_sdl_vgui_context_hh
#define LZZ_sdl_vgui_context_hh
#define LZZ_INLINE inline
struct SDL_Vgui_PrerenderedText : public Vgui_PrerenderedTextI
{
  sdl_stb_prerendered_text prt;
  SDL_Vgui_PrerenderedText ();
  virtual ~ SDL_Vgui_PrerenderedText ();
  void draw (VGUI_COORD const x, VGUI_COORD const y);
  void drawWithColorMod (VGUI_COORD const x, VGUI_COORD const y, VGUI_COLOR const r, VGUI_COLOR const g, VGUI_COLOR const b, VGUI_COLOR const a = VGUI_COLOR_MAX);
  VGUI_COORD getWidth () const;
  VGUI_COORD getHeight () const;
};
class SDL_Vgui_Context : public Vgui_ContextI
{
public:
  SDL_Renderer * mRenderer;
  sdl_stb_font_cache * gFont;
  uint8_t dr;
  uint8_t dg;
  uint8_t db;
  uint8_t da;
  struct SDL_Vgui_Gradiant
  {
    VGUI_COORD x1;
    VGUI_COORD y1;
    VGUI_COORD x2;
    VGUI_COORD y2;
    uint8_t r1;
    uint8_t g1;
    uint8_t b1;
    uint8_t a1;
    uint8_t r2;
    uint8_t g2;
    uint8_t b2;
    uint8_t a2;
    float lx;
    float ly;
    float mx;
    float my;
    float sf;
    bool isActive;
    void computeLineEqn ();
    void getColourAt (VGUI_COORD xp, VGUI_COORD yp, uint8_t & rOut, uint8_t & gOut, uint8_t & bOut, uint8_t & aOut);
  };
  SDL_Vgui_Gradiant activeGradiant;
  SDL_Vgui_Context ();
  virtual Vgui_PrerenderedTextI * genPrerenderedText (sttfont_formatted_text const & str) const;
  static int renderTriangle_edgeTest (int x1, int y1, int x2, int y2, int x3, int y3);
  void setGradient (VGUI_COORD const x1, VGUI_COORD const y1, VGUI_COORD const x2, VGUI_COORD const y2, uint8_t const r1, uint8_t const g1, uint8_t const b1, uint8_t const a1, uint8_t const r2, uint8_t const g2, uint8_t const b2, uint8_t const a2);
  void clearGradient ();
  void renderTriangle (VGUI_COORD const x1, VGUI_COORD const y1, VGUI_COORD const x2, VGUI_COORD const y2, VGUI_COORD const x3, VGUI_COORD const y3);
  void ctx_setScissor ();
  void setColor (VGUI_COLOR const r, VGUI_COLOR const g, VGUI_COLOR const b, VGUI_COLOR const a);
  void setColorF (float const r, float const g, float const b, float const a);
  void clear ();
  void renderQuad (VGUI_COORD const x1, VGUI_COORD const y1, VGUI_COORD const x2, VGUI_COORD const y2);
  void renderQuadWH (VGUI_COORD const x1, VGUI_COORD const y1, VGUI_COORD const width, VGUI_COORD const height);
  static uint64_t const cZero;
  static double const pefFq;
  double getTime () const;
  virtual void renderText (sttfont_formatted_text const & text, VGUI_COORD const x1, VGUI_COORD const y1);
  virtual void getTextSize (sttfont_formatted_text const & text, VGUI_COORD & widthOut, VGUI_COORD & heightOut, sttfont_lookupHint * mHint = NULL, VGUI_COORD const * const maxWidth = NULL) const;
  virtual VGUI_COORD getTextWidth (sttfont_formatted_text const & text, sttfont_lookupHint * mHint = NULL, VGUI_COORD const * const maxWidth = NULL) const;
  virtual VGUI_COORD getTextHeight (sttfont_formatted_text const & text, sttfont_lookupHint * mHint = NULL) const;
  virtual VGUI_COORD getTextLineHeight () const;
  virtual int getTextCaretPos (sttfont_formatted_text const & text, VGUI_COORD const & relativeX, VGUI_COORD const & relativeY, sttfont_lookupHint * mHint = NULL);
  void breakString (sttfont_formatted_text const & stringIn, VGUI_VECTOR <sttfont_formatted_text> & arrOut, VGUI_COORD const xs, bool const tokeniseNewLines = true, VGUI_VECTOR <vecgui::uintQuad> * breakPoints = NULL);
};
LZZ_INLINE int SDL_Vgui_Context::renderTriangle_edgeTest (int x1, int y1, int x2, int y2, int x3, int y3)
                                                                                                  {
		return (y3-y1)*(x2-x1) - (x3-x1)*(y2-y1);
		}
#undef LZZ_INLINE
#endif

////////////////////////////////////////////////////////////////////////

#ifdef VECGUI_IMPL
#ifndef VECGUI_IMPL_DOUBLE_GUARD_sdl_vgui_context
#define VECGUI_IMPL_DOUBLE_GUARD_sdl_vgui_context
// sdl_vgui_context.cpp
//

#define LZZ_INLINE inline
SDL_Vgui_PrerenderedText::SDL_Vgui_PrerenderedText ()
  : Vgui_PrerenderedTextI ()
                                                          {
		prt.mRenderer = ((SDL_Vgui_Context *)Vgui_ContextI::aContext)->mRenderer;
		}
SDL_Vgui_PrerenderedText::~ SDL_Vgui_PrerenderedText ()
                                            { prt.freeTexture(); }
void SDL_Vgui_PrerenderedText::draw (VGUI_COORD const x, VGUI_COORD const y)
                                                          {
		prt.draw(x, y);
		}
void SDL_Vgui_PrerenderedText::drawWithColorMod (VGUI_COORD const x, VGUI_COORD const y, VGUI_COLOR const r, VGUI_COLOR const g, VGUI_COLOR const b, VGUI_COLOR const a)
                                                                                                                                                                       {
		prt.drawWithColorMod(x, y, r, g, b, a);
		}
VGUI_COORD SDL_Vgui_PrerenderedText::getWidth () const
                                    { return prt.width; }
VGUI_COORD SDL_Vgui_PrerenderedText::getHeight () const
                                     { return prt.height; }
void SDL_Vgui_Context::SDL_Vgui_Gradiant::computeLineEqn ()
                                      {
			VGUI_COORD abx = x2-x1;
			VGUI_COORD aby = y2-y1;
			// cross z^ to get perp. vector
			lx = aby;
			ly = -abx;
			// normalise lx,ly
			double len = sqrt(lx*lx + ly*ly);
			sf = 1.0;
			if (len > 0.0000001) {
				lx/=len;
				ly/=len;
				sf = 1.0/len;
				}

			mx = (x1+x2)/2.0;
			my = (y1+y2)/2.0;
			}
void SDL_Vgui_Context::SDL_Vgui_Gradiant::getColourAt (VGUI_COORD xp, VGUI_COORD yp, uint8_t & rOut, uint8_t & gOut, uint8_t & bOut, uint8_t & aOut)
                                                                                                                                {
			//distance to point
			float d = // |(x1-mx,y1-my,0) x (lx, ly, 0)|
					  ly*(xp-mx) - lx*(yp-my);
			d=VGUI_CLAMP(d*sf+0.5, 0.f, 1.f);
			
			rOut = r1*d + r2*(1-d);
			gOut = g1*d + g2*(1-d);
			bOut = b1*d + b2*(1-d);
			aOut = a1*d + a2*(1-d);			
			//std::cout << "(x,y) " << xp << " " << yp << ", d: " << d << " rgba " << double(rOut) << " " << double(gOut) << " " << double(bOut) << " " << double(aOut) << std::endl;
			}
SDL_Vgui_Context::SDL_Vgui_Context ()
  : Vgui_ContextI ()
                                             {
		activeGradiant = {0};
		activeGradiant.isActive = false;
		dr = 0;
		dg = 0;
		db = 0;
		da = 0;
		}
Vgui_PrerenderedTextI * SDL_Vgui_Context::genPrerenderedText (sttfont_formatted_text const & str) const
                                                                                                      {
		if (!gFont) return NULL;
		SDL_Vgui_PrerenderedText * r = VGUI_NEW(SDL_Vgui_PrerenderedText);
		gFont->renderTextToObject(&(r->prt), str);
		
		//std::cout << "Prerendered: " << str << " " << r->prt.width << " " << r->prt.height << std::endl;
		
		
		return r;
		}
void SDL_Vgui_Context::setGradient (VGUI_COORD const x1, VGUI_COORD const y1, VGUI_COORD const x2, VGUI_COORD const y2, uint8_t const r1, uint8_t const g1, uint8_t const b1, uint8_t const a1, uint8_t const r2, uint8_t const g2, uint8_t const b2, uint8_t const a2)
                                                                                                                                                                                                                                                             {
		activeGradiant.x1 = x1;
		activeGradiant.x2 = x2;
		activeGradiant.y1 = y1;
		activeGradiant.y2 = y2;
		activeGradiant.r1 = r1;
		activeGradiant.g1 = g1;
		activeGradiant.b1 = b1;
		activeGradiant.a1 = a1;
		activeGradiant.r2 = r2;
		activeGradiant.g2 = g2;
		activeGradiant.b2 = b2;
		activeGradiant.a2 = a2;
		activeGradiant.isActive = true;
		activeGradiant.computeLineEqn();
		}
void SDL_Vgui_Context::clearGradient ()
                             {
		activeGradiant.isActive = false;
		SDL_SetRenderDrawColor(mRenderer, dr,dg,db,da);
		}
void SDL_Vgui_Context::renderTriangle (VGUI_COORD const x1, VGUI_COORD const y1, VGUI_COORD const x2, VGUI_COORD const y2, VGUI_COORD const x3, VGUI_COORD const y3)
                                                                                                                                                           {
		VGUI_COORD x1a = scalef * x1;
		VGUI_COORD y1a = scalef * y1;
		VGUI_COORD x2a = scalef * x2;
		VGUI_COORD y2a = scalef * y2;
		VGUI_COORD x3a = scalef * x3;
		VGUI_COORD y3a = scalef * y3;

		// Get axis aligned bounding box
		int xMin = VGUI_MIN(VGUI_MIN(x1a, x2a), x3a);
		int xMax = VGUI_MAX(VGUI_MAX(x1a, x2a), x3a);
		int yMin = 1.0 + VGUI_MIN(VGUI_MIN(y1a, y2a), y3a);
		int yMax = 1.0 + VGUI_MAX(VGUI_MAX(y1a, y2a), y3a);

		// Sainity check: Is this scissor culled(?)
		const bool scissorTest = !activeScissor.isNull();
		if (scissorTest) {
			if (xMin > activeScissor.x + activeScissor.w || xMax < activeScissor.x
			|| yMin > activeScissor.y + activeScissor.h || yMax < activeScissor.y) {
				return;
				}
			}
		
		// Itterate over pixels
		int ix1 = x1a;
		int iy1 = y1a;
		int ix2 = x2a;
		int iy2 = y2a;
		int ix3 = x3a;
		int iy3 = y3a;
		
		// winding order test
		int ax = x2 - x1;
		int ay = y2 - y1;
		int bx = x3 - x1;
		int by = y3 - y1;
		const bool reverseWindingOrder = (ax*by - ay*bx) < 0;
		
		if (reverseWindingOrder) {
			int swapx = ix3;
			int swapy = iy3;
			ix3 = ix2;
			iy3 = iy2;
			ix2 = swapx;
			iy2 = swapy;
			}
			

		for (int i = xMin; i <= xMax; ++i) {
			if (scissorTest) {
				if (i > activeScissor.x + activeScissor.w || i < activeScissor.x)
					continue;
				}
			int jIn = yMax+1;
			int jOut = yMax;
			bool intersectsTri = false;
			for (int j = yMin; j <= yMax; ++j) {
				int t1 = renderTriangle_edgeTest(ix1, iy1, ix2, iy2, i, j);
				int t2 = renderTriangle_edgeTest(ix2, iy2, ix3, iy3, i, j);
				int t3 = renderTriangle_edgeTest(ix3, iy3, ix1, iy1, i, j);
				
				if (t1 >= 0 && t2 >= 0 && t3 >= 0) {
					// inside
					if (!intersectsTri) {
						intersectsTri = true;
						jIn = j;
						}
					}
				else {
					// outside
					if (intersectsTri) {
						intersectsTri = false;
						jOut = j;
						break;
						}
					}

				}
				
			if (jOut >= jIn) {
				// scissor test row
				if (scissorTest) {
					if (jIn > activeScissor.y + activeScissor.h || jOut < activeScissor.y)
						continue;
					}
				bool gradTest = activeGradiant.isActive;
				if (gradTest) {
					// test color at top and bottom of tri
					uint8_t r1,g1,b1,a1, r2,g2,b2,a2;
					activeGradiant.getColourAt(i,jIn, r1,g1,b1,a1);
					activeGradiant.getColourAt(i,jOut, r2,g2,b2,a2);
					gradTest = (r1 - r2) | (g1 - g2) | (b1 - b2) | (a1 - a2); //non-zero = difference in gradient 
					if (!gradTest)
						SDL_SetRenderDrawColor(mRenderer, r1,g1,b1,a1); // render the whole rect in a gradiant
					}
				if (!gradTest) {
					SDL_Rect r;
					r.x = i;
					r.y = jIn;
					r.w = 1;
					r.h = jOut - jIn+1;
					SDL_RenderDrawRect(mRenderer, &r);
					}
				else {
					// very slow! draw pixel by pixel
					// tbd - try blitting a surface
					for (int j = jIn; j <= jOut; ++j) {
						uint8_t r1,g1,b1,a1;
						activeGradiant.getColourAt(i,j, r1,g1,b1,a1);
						SDL_SetRenderDrawColor(mRenderer, r1,g1,b1,a1);
						SDL_RenderDrawPoint(mRenderer, i, j);
						}
					}
				}
			}
		}
void SDL_Vgui_Context::ctx_setScissor ()
                              {
		if (activeScissor.isNull()) {
			SDL_RenderSetClipRect(mRenderer, NULL);
			return;
			}
		SDL_Rect r;
		r.x = activeScissor.x;
		r.y = activeScissor.y;
		r.w = activeScissor.w;
		r.h = activeScissor.h;
		SDL_RenderSetClipRect(mRenderer, &r);
		}
void SDL_Vgui_Context::setColor (VGUI_COLOR const r, VGUI_COLOR const g, VGUI_COLOR const b, VGUI_COLOR const a)
                                                                                                       {
		dr = r; dg = g; db = b; da = a;
		SDL_SetRenderDrawColor(mRenderer, dr,dg,db,da);
		}
void SDL_Vgui_Context::setColorF (float const r, float const g, float const b, float const a)
                                                                                    {
		dr = VGUI_COLOR_MAX*r; dg = VGUI_COLOR_MAX*g; db = VGUI_COLOR_MAX*b; da = VGUI_COLOR_MAX*a;
		SDL_SetRenderDrawColor(mRenderer, dr,dg,db,da);
		}
void SDL_Vgui_Context::clear ()
                      {
		//SDL_RenderSetClipRect(mRenderer, NULL);
		setColor(VGUI_COLOR_MAX,VGUI_COLOR_MAX,VGUI_COLOR_MAX,VGUI_COLOR_MAX);
		SDL_RenderClear(mRenderer);
		}
void SDL_Vgui_Context::renderQuad (VGUI_COORD const x1, VGUI_COORD const y1, VGUI_COORD const x2, VGUI_COORD const y2)
                                                                                                             {
		VGUI_COORD px1 = VGUI_MIN(x1, x2);
		VGUI_COORD px2 = VGUI_MAX(x1, x2);
		VGUI_COORD py1 = VGUI_MIN(y1, y2);
		VGUI_COORD py2 = VGUI_MAX(y1, y2);
		renderQuadWH(px1, py1, px2 - px1, py2 - py1);
		}
void SDL_Vgui_Context::renderQuadWH (VGUI_COORD const x1, VGUI_COORD const y1, VGUI_COORD const width, VGUI_COORD const height)
                                                                                                                      {
		int px1 = scalef * x1;
		int py1 = scalef * y1;
		int w = scalef * width;
		int h = scalef * height;
		SDL_Rect r;
		r.x = px1, r.y = py1, r.w = w, r.h = h;
		
		if (activeGradiant.isActive) {
			const bool scissorTest = !activeScissor.isNull();
			for (int i = r.x; i < r.x+r.w; ++i) {
				// scissor test row
				int jIn = r.y;
				int jOut = r.y+r.h;
				if (scissorTest) {
					if (i > activeScissor.x + activeScissor.w || i < activeScissor.x ||
						jIn > activeScissor.y + activeScissor.h || jOut < activeScissor.y)
						continue;
					}
				uint8_t r1,g1,b1,a1, r2,g2,b2,a2;
				activeGradiant.getColourAt(i,jIn, r1,g1,b1,a1);
				activeGradiant.getColourAt(i,jOut, r2,g2,b2,a2);
				bool gradTest = (r1 - r2) | (g1 - g2) | (b1 - b2) | (a1 - a2); //non-zero = difference in gradient 
				if (!gradTest) {
					SDL_SetRenderDrawColor(mRenderer, r1,g1,b1,a1); // render the whole rect in a gradiant
					SDL_Rect r2;
					r2.x = i;
					r2.y = jIn;
					r2.w = 1;
					r2.h = jOut - jIn;
					SDL_RenderDrawRect(mRenderer, &r2);
					}
				else {
					for (int j = jIn; j <= jOut; ++j) {
						uint8_t r1,g1,b1,a1;
						activeGradiant.getColourAt(i,j, r1,g1,b1,a1);
						SDL_SetRenderDrawColor(mRenderer, r1,g1,b1,a1);
						SDL_RenderDrawPoint(mRenderer, i, j);
						}
					}
				}
			return;
			}
		
		SDL_RenderFillRect (mRenderer, &r);
		}
uint64_t const SDL_Vgui_Context::cZero = SDL_GetPerformanceCounter();
double const SDL_Vgui_Context::pefFq = SDL_GetPerformanceFrequency();
double SDL_Vgui_Context::getTime () const
                               {
		return (SDL_GetPerformanceCounter() - cZero)/pefFq;
		}
void SDL_Vgui_Context::renderText (sttfont_formatted_text const & text, VGUI_COORD const x1, VGUI_COORD const y1)
                                                                                                                {
		if (!gFont) return;
		gFont->drawText(scalef*x1, scalef*y1, text);
		}
void SDL_Vgui_Context::getTextSize (sttfont_formatted_text const & text, VGUI_COORD & widthOut, VGUI_COORD & heightOut, sttfont_lookupHint * mHint, VGUI_COORD const * const maxWidth) const
                                                                                                                                                                                                         {
		if (!gFont) return;
		int w, h;
		int maxWidthi = maxWidth ? *maxWidth : 0;
		gFont->getTextSize(w, h, text, mHint, maxWidthi ? &maxWidthi : NULL);
		widthOut = w/scalef;
		heightOut = h/scalef;
		}
VGUI_COORD SDL_Vgui_Context::getTextWidth (sttfont_formatted_text const & text, sttfont_lookupHint * mHint, VGUI_COORD const * const maxWidth) const
                                                                                                                                                                 {
		if (!gFont) return 0;		
		int widthOut, heightOut;
		int maxWidthi = maxWidth ? *maxWidth : 0;
		gFont->getTextSize(widthOut, heightOut, text, mHint, maxWidthi ? &maxWidthi : NULL);
		return widthOut / scalef;
		}
VGUI_COORD SDL_Vgui_Context::getTextHeight (sttfont_formatted_text const & text, sttfont_lookupHint * mHint) const
                                                                                                                        {
		if (!gFont) return 0;
		return gFont->getTextHeight(text) / scalef;
		}
VGUI_COORD SDL_Vgui_Context::getTextLineHeight () const
                                                     {
		if (!gFont) return Vgui_ContextI::getTextLineHeight();
		return gFont->getScaledRowSize() / scalef;
		}
int SDL_Vgui_Context::getTextCaretPos (sttfont_formatted_text const & text, VGUI_COORD const & relativeX, VGUI_COORD const & relativeY, sttfont_lookupHint * mHint)
                                                                                                                                                                         {
		if (!gFont) return -1;
		return gFont->getCaretPos(text, relativeX * scalef, relativeY * scalef, mHint);
		}
void SDL_Vgui_Context::breakString (sttfont_formatted_text const & stringIn, VGUI_VECTOR <sttfont_formatted_text> & arrOut, VGUI_COORD const xs, bool const tokeniseNewLines, VGUI_VECTOR <vecgui::uintQuad> * breakPoints)
                                                                                                        {
		vecgui::breakString_worker(gFont, stringIn, arrOut, xs, tokeniseNewLines, breakPoints);	
		}
#undef LZZ_INLINE
#endif //VECGUI_IMPL_DOUBLE_GUARD_sdl_vgui_context
#endif //VECGUI_IMPL_IMPL
